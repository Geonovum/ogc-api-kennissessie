{
    "bbox": {
        "name": "bbox",
        "in": "query",
        "description": "Only features that have a geometry that intersects the bounding box are selected.\nThe bounding box is provided as four numbers\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n\nThe coordinate reference system is\nWGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nThe query parameter `bbox-crs` is specified in OGC API - Features - Part 2: Coordinate\nReference Systems by Reference.\n\nFor WGS 84 longitude/latitude the values are in most cases the sequence of\nminimum longitude, minimum latitude, maximum longitude and maximum latitude.\nHowever, in cases where the box spans the antimeridian the first value\n(west-most box edge) is larger than the third value (east-most box edge).\n\nIf a feature has multiple spatial geometry properties, it is the decision of the\nserver whether only a single spatial geometry property is used to determine\nthe extent or all relevant geometries.\nThe given coordinates should be separated by commas.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
            "type": "array",
            "maxItems": 6,
            "minItems": 4,
            "items": {
                "type": "number",
                "format": "double"
            }
        }
    },
    "bbox-crsFeatures_{{:collectionId}}": {
        "name": "bbox-crs",
        "in": "query",
        "description": "The coordinate reference system of the `bbox` parameter. Default is WGS84 longitude/latitude.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
            "type": "string",
            "default": "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
            "enum": [
                "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
                "http://www.opengis.net/def/crs/EPSG/0/4326"
            ]
        }
    },
    "crsFeatures_{{:collectionId}}": {
        "name": "crs",
        "in": "query",
        "description": "The coordinate reference system of the response geometries. Default is WGS84 longitude/latitude (with or without height).",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
            "type": "string",
            "default": "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
            "enum": [
                "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
                "http://www.opengis.net/def/crs/EPSG/0/4326"
            ]
        }
    },
    "datetime": {
        "name": "datetime",
        "in": "query",
        "description": "Either a date-time or an interval. Date and time expressions adhere to RFC 3339.\nIntervals may be bounded or half-bounded (double-dots at start or end).\nExamples:\n\n* A date-time: \"2018-02-12T23:20:50Z\"\n* A bounded interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n* Half-bounded intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\nOnly features that have a temporal property that intersects the value of `datetime` are selected.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
            "pattern": "^(?:\\d{4})-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12][0-9]|3[01])$|^(?:[nN][oO][wW])$|^(?:(?:\\d{4})-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12][0-9]|3[01])|(?:\\.\\.)?|(?:[nN][oO][wW]))/(?:(?:\\d{4})-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12][0-9]|3[01])|(?:\\.\\.)?|(?:[nN][oO][wW]))$|^(?:\\d{4})-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12][0-9]|3[01])T(?:[01][0-9]|2[0-3]):(?:[0-5][0-9]):(?:[0-5][0-9]|60)(?:\\.[0-9]+)?(Z|(\\+|-)(?:[01][0-9]|2[0-3]):(?:[0-5][0-9]))$|^(?:(?:\\d{4})-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12][0-9]|3[01])T(?:[01][0-9]|2[0-3]):(?:[0-5][0-9]):(?:[0-5][0-9]|60)(?:\\.[0-9]+)?(Z|(\\+|-)(?:[01][0-9]|2[0-3]):(?:[0-5][0-9]))|(?:\\.\\.)?|(?:[nN][oO][wW]))/(?:(?:\\d{4})-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12][0-9]|3[01])T(?:[01][0-9]|2[0-3]):(?:[0-5][0-9]):(?:[0-5][0-9]|60)(?:\\.[0-9]+)?(Z|(\\+|-)(?:[01][0-9]|2[0-3]):(?:[0-5][0-9]))|(?:\\.\\.)?|(?:[nN][oO][wW]))$",
            "type": "string"
        }
    },
    "fFeatures": {
        "name": "f",
        "in": "query",
        "description": "Select the output format of the response. If no value is provided, the standard HTTP rules apply, i.e., the accept header will be used to determine the format.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
            "type": "string",
            "enum": [
                "csv",
                "html",
                "json"
            ]
        }
    },
    "filter": {
        "name": "filter",
        "in": "query",
        "description": "Filter features in the collection using the query expression in the parameter value. Filter expressions are written in the [Common Query Language (CQL2)](https://docs.ogc.org/is/21-065r1/21-065r1.html), which is an OGC Standard.\n\nThe recommended language for this query parameter is CQL2 Text (`filter-lang=cql2-text`).\n\nCQL2 Text expressions are similar to SQL expressions and also support spatial, temporal and array predicates. All property references must be queryables of the collection and must be declared in the Queryables sub-resource of the collection.\n\nThe following are examples of CQL Text expressions:\n\n* Logical operators (`AND`, `OR`, `NOT`) are supported\n* Simple comparison predicates (`=`, `<>`, `<`, `>`, `<=`, `>=`):\n  * `address.LocalityName = 'Bonn'`\n  * `measuredHeight > 10`\n  * `storeysAboveGround <= 4`\n  * `creationDate > DATE('2017-12-31')`\n  * `creationDate < DATE('2018-01-01')`\n  * `creationDate >= DATE('2018-01-01') AND creationDate <= DATE('2018-12-31')`\n* Advanced comparison operators (`LIKE`, `BETWEEN`, `IN`, `IS NULL`):\n  * `name LIKE '%Kirche%'`\n  * `measuredHeight BETWEEN 10 AND 20`\n  * `address.LocalityName IN ('Bonn', 'Köln', 'Düren')`\n  * `address.LocalityName NOT IN ('Bonn', 'Köln', 'Düren')`\n  * `name IS NULL`\n  * `name IS NOT NULL`\n* Spatial operators (the standard Simple Feature operators, e.g., `S_INTERSECTS`, `S_WITHIN`):\n  * `S_INTERSECTS(bbox, POLYGON((8 52, 9 52, 9 53, 8 53, 8 52)))`\n* Temporal operators (e.g., `T_AFTER`, `T_BEFORE`, `T_INTERSECTS`)\n  * `T_AFTER(creationDate, DATE('2018-01-01'))`\n  * `T_BEFORE(creationDate, DATE('2018-01-01'))`\n  * `T_INTERSECTS(creationDate, INTERVAL('2018-01-01','2018-12-31'))`\n  * `T_INTERSECTS(INTERVAL(begin,end), INTERVAL('2018-01-01','2018-12-31'))`",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
            "type": "string"
        }
    },
    "filter-crs": {
        "name": "filter-crs",
        "in": "query",
        "description": "Specify which of the supported CRSs to use to encode geometric values in a filter expression (parameter 'filter'). Default is WGS84 longitude/latitude.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
            "type": "string",
            "default": "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
            "enum": [
                "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
                "http://www.opengis.net/def/crs/EPSG/0/4326"
            ]
        }
    },
    "filter-lang": {
        "name": "filter-lang",
        "in": "query",
        "description": "Language of the query expression in the 'filter' parameter. Supported are 'cql2-text' (default) and 'cql2-json', specified in the [OGC Standard 'Common Query Language (CQL2)'](https://docs.ogc.org/is/21-065r1/21-065r1.html). 'cql2-text' is an SQL-like text encoding for filter expressions that also supports spatial, temporal and array predicates. 'cql2-json' is a JSON encoding of that grammar, suitable for use as part of a JSON object that represents a query. The use of 'cql2-text' is recommended for filter expressions in the 'filter' parameter.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
            "type": "string",
            "default": "cql2-text",
            "enum": [
                "cql2-text",
                "cql2-json"
            ]
        }
    },
    "limitFeatures": {
        "name": "limit",
        "in": "query",
        "description": "The optional limit parameter limits the number of items that are presented in the response document. Only items are counted that are on the first level of the collection in the response document. Nested objects contained within the explicitly requested items are not counted. If the value is higher than the maximum page size, the maximum page size is used instead of the parameter value.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
            "maximum": 1000,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 10
        }
    },
    "offsetFeatures": {
        "name": "offset",
        "in": "query",
        "description": "The optional offset parameter identifies the index of the first feature in the response in the overall result set.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0
        }
    },
    "properties_{{:collectionId}}": {
        "name": "properties",
        "in": "query",
        "description": "The properties that should be included for each feature. The parameter value is a comma-separated list of property names. By default, all feature properties with a value are returned.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
            "type": "array",
            "items": {
                "type": "string",
                "enum": []
            }
        }
    },
    "resultTypeFeatures": {
        "name": "result-type",
        "in": "query",
        "description": "'hitsOnly'.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
            "type": "string",
            "enum": [
                "hitsOnly"
            ]
        }
    },
    "featureId": {
        "name": "featureId",
        "in": "path",
        "description": "The local identifier of a feature, unique within the feature collection.",
        "required": true,
        "schema": {
            "pattern": "[^/ ]+",
            "type": "string"
        }
    }
}